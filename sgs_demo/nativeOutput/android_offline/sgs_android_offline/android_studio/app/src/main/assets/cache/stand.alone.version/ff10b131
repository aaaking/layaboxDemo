var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
* name;
*/
var ExchangeCard = /** @class */ (function (_super) {
    __extends(ExchangeCard, _super);
    function ExchangeCard() {
        var _this = _super.call(this) || this;
        _this.requestNum = 0;
        _this.requestIng = false;
        _this._labCount = new Laya.Label();
        _this._labCount.right = 20;
        _this._labCount.bottom = 20;
        _this._labCount.fontSize = 30;
        _this._labCount.color = "#ffffff";
        _this._labCount.stroke = 5;
        _this._labCount.strokeColor = "0000000";
        _this.addChild(_this._labCount);
        _this._btnBuy = new menu.MenuCard("menu/btn_buy.png");
        _this._btnBuy.stateNum = 2;
        _this._btnBuy.anchorX = _this._btnBuy.anchorY = 0.5;
        _this.addChild(_this._btnBuy);
        _this._btnBuy.centerX = 0;
        _this._btnBuy.y = 250 + (_this._btnBuy.height >> 1);
        _this.height = _this._btnBuy.y + (_this._btnBuy.height >> 1); //360
        _this._labPrice = new Laya.Label("200");
        _this._btnBuy.addChild(_this._labPrice);
        _this._labPrice.color = "#ffffff";
        _this._labPrice.centerY = 0;
        _this._labPrice.fontSize = 20;
        _this._labPrice.stroke = 2;
        _this._labPrice.strokeColor = "#000000";
        _this._labPrice.x = 80;
        // this._labPrice.y = this._btnBuy.height - this._labPrice.height >> 1
        // this._labPrice.anchorX = this._labPrice.anchorY = 0.5
        _this._btnBuy.on(Laya.Event.CLICK, _this, _this.buyCard);
        _this._mask.visible = false;
        return _this;
    }
    ExchangeCard.prototype.updata = function () {
        _super.prototype.updata.call(this);
        this._icon.skin = "cards/" + this.dataSource.cfg.icon + ".png";
        this._labPrice.text = Utils.toNumberUnit(this.dataSource.price);
        if (this.dataSource && this.dataSource.isself) {
            this._btnBuy.skin = "menu/btn_undo.png";
            this._labPrice.visible = false;
        }
        else {
            this._btnBuy.skin = "menu/btn_buy.png";
            this._labPrice.visible = true;
        }
    };
    ExchangeCard.prototype.buyCard = function () {
        if (!this.dataSource.isself && parseInt(localStorage.getItem("balance")) < this.dataSource.price) {
            new CommonDialog("余额不足!");
            return;
        }
        var baseID = "0000000000000000000000000000000000000000000000000000000000000000";
        var param = baseID.substring(0, 64 - this.dataSource.id.toString(16).length) + this.dataSource.id.toString(16);
        this.showLoading(false);
        UITools.changeGray(this._btnBuy);
        Ajax.callNet(GameConfig.RPC_URL, { "jsonrpc": "2.0", "method": Urls.personal_unlockAccount, "params": [localStorage.getItem('uuid'), "", null], "id": 67 }, "POST", null, function (data) {
            console.info(data);
            Ajax.callNet(GameConfig.RPC_URL, { "jsonrpc": "2.0", "method": Urls.eth_sendTransaction, "params": [{ "from": localStorage.getItem('uuid'), "to": GameConfig.RPC_ADDRESS, "data": "0xc70f5eaa" + param, "value": "0x" + parseInt(this.dataSource.price).toString(16) }], "id": 67 }, "POST", null, function (data) {
                console.info(data);
                this.getReceiptByLoop(JSON.parse(data));
            }.bind(this), this.onNetError.bind(this));
        }.bind(this), this.onNetError.bind(this));
    };
    ExchangeCard.prototype.initBoxWaiting = function () {
        this._boxWaiting = new Laya.Box();
        this._boxWaiting.centerX = this._boxWaiting.centerY = 0;
        var img = new Laya.Image("menu/img_3.png");
        this._boxWaiting.addChild(img);
        this._wait = new Laya.Label(ExchangeCard.buyIng);
        this._wait.centerX = this._wait.centerY = 0;
        this._wait.color = "#Ceb589";
        this._wait.fontSize = 30;
        this._boxWaiting.addChild(this._wait);
    };
    ExchangeCard.prototype.showLoading = function (success) {
        Exchange.instance.loading(success);
        if (!this._boxWaiting) {
            this.initBoxWaiting();
        }
        if (success) {
            UITools.resetGray(this._btnBuy);
            this.requestNum = 0;
            this.requestIng = false;
            // Exchange.instance.mouseEnabled = true;
            this._boxWaiting.removeSelf();
            Laya.timer.clearAll(this);
            // this.removeSelf()
        }
        else {
            if (!this._boxWaiting.parent) {
                // Exchange.instance.mouseEnabled = false;
                this._wait.text = (this.dataSource && this.dataSource.isself) ? ExchangeCard.cancelIng : ExchangeCard.buyIng;
                Laya.stage.addChild(this._boxWaiting);
            }
        }
    };
    ExchangeCard.prototype.onNetError = function (error) {
        UITools.resetGray(this._btnBuy);
        Laya.timer.clearAll(this);
        this.requestNum = 0;
        this.requestIng = false;
        // Exchange.instance.mouseEnabled = true;
        Exchange.instance.loading(true);
        if (this._boxWaiting) {
            this._boxWaiting.removeSelf();
        }
    };
    ExchangeCard.prototype.getReceiptByLoop = function (info) {
        Laya.timer.loop(1000, this, function () {
            if (this.requestNum > 180) {
                this.onNetError();
                this.requestNum = 0;
                return;
            }
            if (this.requestIng) {
                return;
            }
            this.requestNum++;
            this.requestIng = true;
            Ajax.callNet(GameConfig.RPC_URL, { "jsonrpc": "2.0", "method": Urls.eth_getTransactionReceipt, "params": [info.result], "id": this.requestNum }, "POST", null, function (data) {
                console.info(data);
                var cardsinfo = JSON.parse(data);
                if (cardsinfo.result) {
                    this.showLoading(true);
                    Dispatcher.dispatch("updateInfo");
                    Dispatcher.dispatch("userBalance", [this.dataSource.isself ? 0 : -this.dataSource.price]);
                }
                else {
                    this.requestIng = false;
                }
            }.bind(this), this.onNetError.bind(this));
        });
    };
    ExchangeCard.cancelIng = "正在撤销中...";
    ExchangeCard.buyIng = "正在购买中...";
    return ExchangeCard;
}(Card));
//# sourceMappingURL=ExchangeCard.js.map