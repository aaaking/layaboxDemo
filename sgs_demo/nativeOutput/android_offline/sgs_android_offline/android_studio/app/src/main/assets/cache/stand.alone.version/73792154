/*
* name;
*/
var CardPackageManager = /** @class */ (function () {
    function CardPackageManager() {
    }
    Object.defineProperty(CardPackageManager, "instance", {
        get: function () {
            if (!this._instance)
                this._instance = new CardPackageManager();
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    CardPackageManager.prototype.getCountByID = function (cardid) {
        for (var k in this._cards) {
            var v = this._cards[k];
            if (v.id == cardid) {
                return parseInt(v.count);
            }
        }
        return 0;
    };
    CardPackageManager.prototype.addCountByID = function (cardid, card) {
        for (var k in this._cards) {
            var v = this._cards[k];
            if (v.id == cardid) {
                v.count = card ? card.count : (v.count + 1);
            }
        }
        if (card) {
            this._cards.push(card);
        }
    };
    CardPackageManager.prototype.testInitCards = function (callback) {
        this._cards = [];
        Ajax.callNet(GameConfig.RPC_URL, { "jsonrpc": "2.0", "method": Urls.eth_call, "params": [{ "from": localStorage.getItem('uuid'), "to": GameConfig.RPC_ADDRESS, "data": "0x179a074f" }, "latest"], "id": 67 }, "POST", null, function (data) {
            this._cards = ParseData.parseCardPackage(data);
            this.deleteNull();
            this._cards.sort(this.sortOnReduce);
            callback();
        }.bind(this));
    };
    Object.defineProperty(CardPackageManager.prototype, "cards", {
        get: function () {
            if (!this._cards)
                return [];
            return this._cards;
        },
        enumerable: true,
        configurable: true
    });
    CardPackageManager.prototype.deleteNull = function () {
        for (var i = 0; i < this._cards.length;) {
            if (!this._cards[i])
                this._cards.splice(i, 1);
            else
                i++;
        }
    };
    Object.defineProperty(CardPackageManager.prototype, "sortOnCampCards", {
        get: function () {
            this.deleteNull();
            return this._cards.sort(this.sortOnCamp);
        },
        enumerable: true,
        configurable: true
    });
    CardPackageManager.prototype.sortOnNormal = function (a, b) {
        return a.cfg.id - b.cfg.id;
    };
    CardPackageManager.prototype.sortOnReduce = function (a, b) {
        return b.cfg.id - a.cfg.id;
    };
    CardPackageManager.prototype.sortOnCamp = function (a, b) {
        if (a.cfg.camp < b.cfg.camp)
            return -1;
        else if (a.cfg.camp == b.cfg.camp)
            return 0;
        else
            return 1;
    };
    CardPackageManager.prototype.getCardsByCamp = function (camp) {
        if (camp == 5)
            return this._cards;
        else
            return this._cards.filter(function (item) {
                var cfg = GameConfig.getCfgHeroById(item && item.cfg ? item.cfg.id : -16913);
                return cfg && cfg.camp == camp;
            });
    };
    CardPackageManager.prototype.judgeHaveById = function (id) {
        for (var i = 0; i < this.cards.length; i++) {
            if (this._cards[i].id == id) {
                return true;
            }
        }
        return false;
    };
    return CardPackageManager;
}());
//# sourceMappingURL=CardPackageManager.js.map